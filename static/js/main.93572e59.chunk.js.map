{"version":3,"sources":["MostraVoltas.jsx","MostraTempo.jsx","Btn.jsx","App.js","reportWebVitals.js","index.js"],"names":["MostraVoltas","props","className","voltas","MostraTempo","temp","tempo","min","Math","round","seg","segStr","formatTemp","Btn","btn","App","useState","numVoltas","setNumVoltas","running","setRunning","setTempo","useEffect","console","info","timer","setInterval","old","clearInterval","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+LAEaA,EAAe,SAACC,GAC3B,OACE,oBAAGC,UAAU,SAAb,UACE,+BAAOD,EAAME,SADf,IAC8B,uBAD9B,aCFSC,EAAc,SAACH,GAC1B,IAAMI,EAAOJ,EAAMK,MACbC,EAAMC,KAAKC,MAAMJ,EAAO,IACxBK,EAAMF,KAAKC,MAAMJ,EAAO,IAExBM,EAASD,EAAM,GAAK,IAAMA,EAAMA,EAChCE,EAAU,UAFDL,EAAM,GAAK,IAAMA,EAAMA,EAEtB,YAAgBI,GAChC,OACE,oBAAGT,UAAU,QAAb,UAAsBU,EAAtB,IAAkC,uBAChC,8D,eCTOC,EAAM,SAACZ,GAAD,OAAW,kDAAYA,GAAZ,aAAoBA,EAAMa,QCgEzCC,MA5Df,WAAiB,IAAD,EACoBC,mBAAS,GAD7B,mBACPC,EADO,KACIC,EADJ,OAEgBF,oBAAS,GAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGYJ,mBAAS,GAHrB,mBAGPV,EAHO,KAGAe,EAHA,KAgDd,OA3CAC,qBAAU,WACRC,QAAQC,KAAKL,GACb,IAAIM,EAAQ,KAMZ,OALIN,IACFM,EAAQC,aAAY,WAClBL,GAAS,SAAAM,GAAG,OAAIA,EAAM,OACrB,MAEE,WACDF,GACFG,cAAcH,MAGjB,CAACN,IA+BF,sBAAKjB,UAAU,MAAf,UACE,cAAC,EAAD,CAAcC,OAAQc,IACtB,cAAC,EAAD,CAAKf,UAAU,SAASY,IAAI,IAAIe,QA1BlB,WAChBX,EAAaD,EAAY,GAEP,IAAdA,GAAiBG,GAAYD,MAwB/B,cAAC,EAAD,CAAKjB,UAAU,SAASY,IAAI,IAAIe,QArBjB,WACjBN,QAAQC,KAAK,cAAgBP,GACzBA,EAAY,GACdC,EAAaD,EAAY,GAET,IAAdA,IACFI,EAAS,GACTH,EAAa,GACbE,GAAW,OAcVH,EAAY,GAAK,cAAC,EAAD,CAAaX,MAAOA,IACtC,cAAC,EAAD,CAAKuB,QAlCa,WACpBT,GAAYD,GACPA,GAAyB,IAAdF,GAAiBC,EAAaD,EAAY,IAgC3BH,IAAI,YACjC,cAAC,EAAD,CAAKe,QAZK,WACZR,EAAS,GACTH,EAAa,GACbE,GAAW,IASYN,IAAI,kBCjDhBgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.93572e59.chunk.js","sourcesContent":["import React from 'react'\n\nexport const MostraVoltas = (props) => {\n  return (\n    <p className='voltas'>\n      <span>{props.voltas}</span> <br />\n      Voltas\n    </p>\n  )\n}\n","import React from 'react'\n\nexport const MostraTempo = (props) => {\n  const temp = props.tempo\n  const min = Math.round(temp / 60)\n  const seg = Math.round(temp % 60)\n  const minStr = min < 10 ? '0' + min : min\n  const segStr = seg < 10 ? '0' + seg : seg\n  const formatTemp = `${minStr}:${segStr}`\n  return (\n    <p className='tempo'>{formatTemp} <br />\n      <span>Tempo medio por voltas</span>\n    </p>\n  )\n}\n","import React from 'react'\n\nexport const Btn = (props) => <button {...props}>{props.btn}</button>\n","import React, { useState, useEffect } from 'react'\nimport { MostraVoltas } from './MostraVoltas'\nimport { MostraTempo } from './MostraTempo'\nimport './styles.css'\nimport { Btn } from './Btn'\n\nfunction App () {\n  const [numVoltas, setNumVoltas] = useState(0)\n  const [running, setRunning] = useState(false)\n  const [tempo, setTempo] = useState(0)\n\n  useEffect(() => {\n    console.info(running)\n    let timer = null\n    if (running) {\n      timer = setInterval(() => {\n        setTempo(old => old + 1)\n      }, 100)\n    }\n    return () => {\n      if (timer) {\n        clearInterval(timer)\n      }\n    }\n  }, [running])\n\n  const toggleRunning = () => {\n    setRunning(!running)\n    if (!running && numVoltas === 0) setNumVoltas(numVoltas + 1)\n  }\n\n  const increment = () => {\n    setNumVoltas(numVoltas + 1)\n\n    if (numVoltas === 0) setRunning(!running)\n  }\n\n  const dencrement = () => {\n    console.info('dencrement ' + numVoltas)\n    if (numVoltas > 0) {\n      setNumVoltas(numVoltas - 1)\n    }\n    if (numVoltas === 1) {\n      setTempo(0)\n      setNumVoltas(0)\n      setRunning(false)\n    }\n  }\n\n  const reset = () => {\n    setTempo(0)\n    setNumVoltas(0)\n    setRunning(false)\n  }\n  return (\n    <div className='App'>\n      <MostraVoltas voltas={numVoltas} />\n      <Btn className='bigger' btn='+' onClick={increment} />\n      <Btn className='bigger' btn='-' onClick={dencrement} />\n      {numVoltas > 0 && <MostraTempo tempo={tempo} />}\n      <Btn onClick={toggleRunning} btn='Iniciar' />\n      <Btn onClick={reset} btn='Reiniciar' />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}